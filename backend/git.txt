# git :- version control system , git is a tool that helps to track changes in code.

# github :- website that allows developers to store and manage their code using git.

"~" :-shows we are in root directory(folder)

Cloning a repo: git clone <-link->
 # copy HTTPS link(we can also do with ssh)
 # cd :- change directory

 #for autocomplete in vscode press TAB

 #ls :- list files 

 #ls -a :- for all files (hidden also)

#status :- git status for checking the status (means any update you made from github files)
*untracked - new files that git doesn't yet track(new file)
*modified - changed
*staged- files ready to be committed( you add the file but doesn't commit)
*unmodified- Unchanged 

#Add and commit

add: git add (filename) or git add .(means all files)
commit : git commit -m "message"

#Push command 

*push :- upload local repo content to remote repo
*git push origin main, here orgin is the repo from where we have clonned our project, main is the name of the branch .

#Init Command 

init - used to create a new git repo

git init 
git remote add origin <-link->
git remote -v (to verify remote)
git branch (to check branch)
git branch -M main (to rename branch)
git push origin main or git push -u origin main (u set upstream)

# Branch Commands 
 git branch (to check branch)
 git branch -m main(to rename branch )
 git checkout <-branch name-> (to navigate )
 git checkout -b <-new branch name-> (to create new branch)
 git branch -d <-branch name-> (to delete branch)(you cannot delete the same branch where you stand at)

 #Merging code(branches) 
 way 1 

 git diff <-branch name -> (to compare commits, branches , files and more )
 git merge <-branch name-> (to merge 2 branches )

 way 2

 Create a PR(pull request)

#Pull Commmand 

git pull origin main
used to fetch and download content from a remote reppo and immediately update the local repo to match that content.

#Merge Conflicts 
An event that takes place when Git is unable to automatically resolve differences in code between two commits.

#Undoing changes 
case 1 :- staged changes 
*git reset <-file name->
*git reset (all files )

case 2 :- committed changes (for one commit)
 *git reset HEAD-1
  
case 3 : committed changes (for many comments)
git reset <-commit hash->
git reset --hard <-commit hash->

#fork :- make a copy (rough)
take someone's code and do the mandatory change and can do the pull request (generally for open source)

#cherry-pick :- you can do the changes in your code according to the changes done by others in their code .
 OR you can copy the features from other branch .
 command :- git cherry-pick <-commit id->.